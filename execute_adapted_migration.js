const { Pool } = require('pg');

const DATABASE_URL = "postgresql://postgres:jaUlzMfMxrTAXGtAWbYjTLBgJDSNxBPR@trolley.proxy.rlwy.net:28951/railway";
const pool = new Pool({ connectionString: DATABASE_URL });

console.log(`
==================================================
üéØ EJECUTANDO MIGRACI√ìN ADAPTADA RIFAS
==================================================
`);

async function executeAdaptedMigration() {
    const client = await pool.connect();
    try {
        console.log('üìñ Leyendo archivo de migraci√≥n adaptada...\n');
        
        const fs = require('fs');
        const path = require('path');
        const migrationPath = path.join(__dirname, 'migrations', '003_raffles_system_adapted.sql');
        
        if (!fs.existsSync(migrationPath)) {
            throw new Error('Archivo de migraci√≥n adaptada no encontrado: ' + migrationPath);
        }
        
        const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
        
        console.log('üîß Ejecutando migraci√≥n adaptada...\n');
        
        await client.query('BEGIN');
        await client.query(migrationSQL);
        await client.query('COMMIT');
        
        console.log('‚úÖ Migraci√≥n adaptada ejecutada exitosamente!\n');
        
        // Verificar tablas creadas
        console.log('üîç Verificando estructura completa...\n');
        
        const newTables = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE 'raffle%'
            ORDER BY table_name
        `);
        
        console.log('üìã Todas las tablas de rifas:');
        newTables.rows.forEach(row => {
            console.log(`   ‚úÖ ${row.table_name}`);
        });
        
        // Verificar funciones
        console.log('\nüîß Funciones disponibles:');
        const functions = await client.query(`
            SELECT proname 
            FROM pg_proc 
            WHERE proname LIKE 'raffle_%' OR proname = 'generate_unique_raffle_code' OR proname = 'check_user_raffle_limit'
            ORDER BY proname
        `);
        
        functions.rows.forEach(row => {
            console.log(`   ‚úÖ ${row.proname}()`);
        });
        
        // Probar generaci√≥n de c√≥digo
        console.log('\nüé≤ Probando generaci√≥n de c√≥digo:');
        const codeTest = await client.query('SELECT generate_unique_raffle_code() as code');
        console.log(`   C√≥digo generado: ${codeTest.rows[0].code}`);
        
        // Probar verificaci√≥n de l√≠mites
        console.log('\nüë§ Probando verificaci√≥n de l√≠mites XP:');
        const limitTest = await client.query('SELECT * FROM check_user_raffle_limit(NULL::UUID) LIMIT 1');
        if (limitTest.rows.length > 0) {
            console.log(`   Sistema de l√≠mites: Funcional`);
        }
        
        // Verificar vista
        console.log('\nüëÅÔ∏è Verificando vista optimizada:');
        const viewTest = await client.query(`
            SELECT COUNT(*) as count FROM information_schema.views 
            WHERE table_name = 'raffle_lobby_view'
        `);
        console.log(`   Vista lobby: ${viewTest.rows[0].count > 0 ? '‚úÖ Creada' : '‚ùå No encontrada'}`);
        
        console.log(`
==================================================
‚úÖ SISTEMA DE RIFAS ADAPTADO COMPLETAMENTE
==================================================

Caracter√≠sticas implementadas:
‚úÖ Trabaja con estructura existente de raffles
‚úÖ Modo empresas (+3000 fuegos)
‚úÖ Modo premio con aprobaciones
‚úÖ L√≠mites por XP (50/500/1000)
‚úÖ Tickets digitales con QR
‚úÖ C√≥digos num√©ricos de 6 d√≠gitos
‚úÖ Sistema completo de auditor√≠a

La base de datos est√° lista para el backend!
Pr√≥ximo paso: Implementar RaffleService.js
==================================================
        `);
        
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå Error en migraci√≥n:', error.message);
        
        if (error.message.includes('already exists') || error.message.includes('duplicate column')) {
            console.log('‚ÑπÔ∏è Algunos elementos ya existen, lo cual es normal');
        }
        
    } finally {
        client.release();
        await pool.end();
    }
}

executeAdaptedMigration().catch(console.error);
