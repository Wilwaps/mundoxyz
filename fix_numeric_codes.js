const { Pool } = require('pg');

// Configuraci√≥n de conexi√≥n
const DATABASE_URL = "postgresql://postgres:jaUlzMfMxrTAXGtAWbYjTLBgJDSNxBPR@trolley.proxy.rlwy.net:28951/railway";
const pool = new Pool({ connectionString: DATABASE_URL });

console.log(`
==================================================
üî¢ CAMBIO A C√ìDIGOS NUM√âRICOS (6 D√çGITOS)
==================================================
`);

async function changeToNumericCodes() {
    const client = await pool.connect();
    try {
        console.log('üîß 1. ELIMINANDO FUNCI√ìN ANTERIOR...\n');
        await client.query('DROP FUNCTION IF EXISTS generate_unique_bingo_room_code() CASCADE');
        console.log('‚úÖ Funci√≥n anterior eliminada\n');

        console.log('üîß 2. CREANDO FUNCI√ìN CON C√ìDIGOS NUM√âRICOS (6 D√çGITOS)...\n');
        
        const createFunctionSQL = `
CREATE OR REPLACE FUNCTION generate_unique_bingo_room_code()
RETURNS VARCHAR(6)
LANGUAGE plpgsql
AS $$
DECLARE
    new_code VARCHAR(6);
    max_attempts INTEGER := 100;
    attempt_count INTEGER := 0;
    code_exists BOOLEAN;
BEGIN
    -- Generar c√≥digos num√©ricos de 6 d√≠gitos (100000-999999)
    LOOP
        -- Generar n√∫mero aleatorio entre 100000 y 999999
        -- Esto garantiza siempre 6 d√≠gitos (no empezar√° con 0)
        new_code := CAST(100000 + floor(random() * 900000)::int AS VARCHAR);
        
        -- Verificar si el c√≥digo ya existe en bingo_rooms
        SELECT EXISTS(
            SELECT 1 
            FROM bingo_rooms 
            WHERE bingo_rooms.code = new_code
        ) INTO code_exists;
        
        -- Si no existe, retornar el c√≥digo
        IF NOT code_exists THEN
            RETURN new_code;
        END IF;
        
        -- Incrementar contador de intentos
        attempt_count := attempt_count + 1;
        IF attempt_count >= max_attempts THEN
            RAISE EXCEPTION 'No se pudo generar un c√≥digo √∫nico despu√©s de % intentos', max_attempts;
        END IF;
    END LOOP;
END;
$$;`;

        await client.query(createFunctionSQL);
        console.log('‚úÖ Nueva funci√≥n creada con c√≥digos num√©ricos\n');

        // 3. Tambi√©n actualizar para TicTacToe si existe
        console.log('üîß 3. ACTUALIZANDO FUNCI√ìN TICTACTOE (si existe)...\n');
        
        // Primero verificar si existe
        const checkTicTacToe = await client.query(`
            SELECT proname FROM pg_proc 
            WHERE proname = 'generate_unique_room_code'
        `);
        
        if (checkTicTacToe.rows.length > 0) {
            await client.query('DROP FUNCTION IF EXISTS generate_unique_room_code() CASCADE');
            
            const createTicTacToeFunction = `
CREATE OR REPLACE FUNCTION generate_unique_room_code()
RETURNS VARCHAR(6)
LANGUAGE plpgsql
AS $$
DECLARE
    new_code VARCHAR(6);
    max_attempts INTEGER := 100;
    attempt_count INTEGER := 0;
    code_exists BOOLEAN;
BEGIN
    -- Generar c√≥digos num√©ricos de 6 d√≠gitos (100000-999999)
    LOOP
        -- Generar n√∫mero aleatorio entre 100000 y 999999
        new_code := CAST(100000 + floor(random() * 900000)::int AS VARCHAR);
        
        -- Verificar si el c√≥digo ya existe en tictactoe_rooms
        SELECT EXISTS(
            SELECT 1 
            FROM tictactoe_rooms 
            WHERE tictactoe_rooms.code = new_code
        ) INTO code_exists;
        
        -- Si no existe, retornar el c√≥digo
        IF NOT code_exists THEN
            RETURN new_code;
        END IF;
        
        -- Incrementar contador
        attempt_count := attempt_count + 1;
        IF attempt_count >= max_attempts THEN
            RAISE EXCEPTION 'No se pudo generar un c√≥digo √∫nico despu√©s de % intentos', max_attempts;
        END IF;
    END LOOP;
END;
$$;`;
            
            await client.query(createTicTacToeFunction);
            console.log('‚úÖ Funci√≥n TicTacToe tambi√©n actualizada\n');
        } else {
            console.log('‚ÑπÔ∏è No se encontr√≥ funci√≥n TicTacToe, omitiendo...\n');
        }

        // 4. Probar generaci√≥n
        console.log('üß™ 4. PROBANDO GENERACI√ìN DE C√ìDIGOS...\n');
        
        const test1 = await client.query('SELECT generate_unique_bingo_room_code() as code');
        console.log(`‚úÖ Test 1 - C√≥digo Bingo: ${test1.rows[0].code}`);
        
        const test2 = await client.query('SELECT generate_unique_bingo_room_code() as code');
        console.log(`‚úÖ Test 2 - C√≥digo Bingo: ${test2.rows[0].code}`);
        
        const test3 = await client.query('SELECT generate_unique_bingo_room_code() as code');
        console.log(`‚úÖ Test 3 - C√≥digo Bingo: ${test3.rows[0].code}`);
        
        // Verificar formato
        const code = test1.rows[0].code;
        if (/^\d{6}$/.test(code)) {
            console.log('‚úÖ Formato correcto: 6 d√≠gitos num√©ricos');
        } else {
            console.log('‚ùå Error: El c√≥digo no tiene el formato esperado');
        }
        
        console.log(`
==================================================
‚úÖ CAMBIO COMPLETADO EXITOSAMENTE
==================================================

CAMBIOS APLICADOS:
1. Funci√≥n generate_unique_bingo_room_code() ahora genera 
   c√≥digos num√©ricos de 6 d√≠gitos (100000-999999)
   
2. Funci√≥n generate_unique_room_code() (TicTacToe) tambi√©n
   actualizada con el mismo formato

3. Los c√≥digos nunca empezar√°n con 0, siempre ser√°n 
   6 d√≠gitos completos

VENTAJAS:
- M√°s f√°cil de compartir verbalmente
- M√°s f√°cil de recordar
- M√°s f√°cil de escribir en dispositivos m√≥viles
- Consistente con otros sistemas de c√≥digos de sala

CAPACIDAD:
- 900,000 combinaciones posibles (100000-999999)
- Suficiente para el volumen esperado de salas
`);
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        if (error.detail) console.error('Detalle:', error.detail);
    } finally {
        client.release();
        await pool.end();
    }
}

changeToNumericCodes().catch(console.error);
